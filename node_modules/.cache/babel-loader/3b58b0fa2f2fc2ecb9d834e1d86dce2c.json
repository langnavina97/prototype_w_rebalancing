{"ast":null,"code":"var _jsxFileName = \"/Users/navinalang/Navina-workgroup/05_create_and_burn_copy/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport LiquidityPool from \"./abis/LiquidityPool.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Button, Header, HeaderSubheader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.createPair = async () => {\n      await this.state.TokenContract.methods.createNewPair().send({\n        from: this.state.account\n      });\n    };\n\n    this.approveRouter = async () => {\n      const tokenA = await this.state.TokenContract.methods.tokenA().call();\n      const tokenB = await this.state.TokenContract.methods.tokenB().call();\n      console.log(tokenA);\n      console.log(tokenB);\n      const routerAddress = await this.state.TokenContract.methods.getRouterAddress().call();\n      await this.state.TokenContract.methods.approveRouter().send({\n        from: this.state.account\n      });\n    };\n\n    this.mint = async () => {\n      await this.state.TokenContract.methods.mint(100).send({\n        from: this.state.account\n      });\n    };\n\n    this.addLiquidity = async () => {\n      await this.state.TokenContract.methods.addLiquidity().send({\n        from: this.state.account\n      });\n    };\n\n    this.state = {\n      account: '',\n      LPContract: null,\n      address: \"\",\n      tokenA: \"\",\n      tokenB: \"\",\n      pairAddress: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  } // first up is to detect ethereum provider\n\n\n  async loadWeb3() {\n    const provider = await detectEthereumProvider(); // modern browsers\n\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const LPContract = new web3.eth.Contract(LiquidityPool.abi, \"0x74bfAe9b26466cE7db8d44D4880814CCa4e46c5f\");\n    this.setState({\n      LPContract\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Header, {\n      as: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Velvet.Capital\"), React.createElement(HeaderSubheader, {\n      as: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, \"Create and Burn\"), React.createElement(Button, {\n      onClick: this.createPair,\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Create Pool!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.approveRouter,\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, \"Approve!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.mint,\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Mint!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Button, {\n      onClick: this.addLiquidity,\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, \"Add Liquidity!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/navinalang/Navina-workgroup/05_create_and_burn_copy/client/src/App.js"],"names":["React","Component","LiquidityPool","detectEthereumProvider","Web3","Button","Header","HeaderSubheader","App","constructor","props","handleInputChange","event","target","value","type","checked","name","setState","createPair","state","TokenContract","methods","createNewPair","send","from","account","approveRouter","tokenA","call","tokenB","console","log","routerAddress","getRouterAddress","mint","addLiquidity","LPContract","address","pairAddress","componentDidMount","loadWeb3","loadBlockchainData","provider","window","web3","accounts","eth","getAccounts","Contract","abi","render","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport LiquidityPool from \"./abis/LiquidityPool.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Button, Header, HeaderSubheader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      LPContract: null,\n      address: \"\",\n      tokenA: \"\",\n      tokenB: \"\",\n      pairAddress: \"\",\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    // modern browsers\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({ account: accounts[0] })\n    const LPContract = new web3.eth.Contract(LiquidityPool.abi, \"0x74bfAe9b26466cE7db8d44D4880814CCa4e46c5f\");\n    this.setState({ LPContract });\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  createPair = async() => {\n    await this.state.TokenContract.methods.createNewPair().send({from: this.state.account});\n  }\n\n  approveRouter = async() => {\n    const tokenA = await this.state.TokenContract.methods.tokenA().call();\n    const tokenB = await this.state.TokenContract.methods.tokenB().call();\n    \n    console.log(tokenA);\n    console.log(tokenB);\n\n    const routerAddress = await this.state.TokenContract.methods.getRouterAddress().call();\n    await this.state.TokenContract.methods.approveRouter().send({from: this.state.account});\n  }\n\n  mint = async() => {\n    await this.state.TokenContract.methods.mint(100).send({from: this.state.account});\n  }\n\n  addLiquidity = async() => {\n    await this.state.TokenContract.methods.addLiquidity().send({from: this.state.account});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <br></br>\n        <Header as='h1'>Velvet.Capital</Header>\n        <HeaderSubheader as='h2'>Create and Burn</HeaderSubheader>\n\n        <Button onClick={this.createPair} color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Create Pool!</Button><br></br>\n        <Button onClick={this.approveRouter} color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Approve!</Button><br></br>\n        <Button onClick={this.mint} color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Mint!</Button><br></br>\n        <Button onClick={this.addLiquidity} color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Add Liquidity!</Button><br></br>\n      </div >\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}