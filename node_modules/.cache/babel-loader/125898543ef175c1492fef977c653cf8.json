{"ast":null,"code":"var _jsxFileName = \"/Users/navinalang/Navina-workgroup/05_create_and_burn/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport Factory from \"./abis/Factory.json\";\nimport Router from \"./abis/Router.json\";\nimport Pair from \"./abis/Pair.json\";\nimport Token1 from \"./abis/Token1.json\";\nimport Token2 from \"./abis/Token2.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Button, Header, HeaderSubheader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.deployTest = async () => {\n      const contr = Token1.deploy().send({\n        from: this.state.account\n      });\n      console.log(contr);\n    };\n\n    this.state = {\n      account: '',\n      FacforyContract: null,\n      RouterContract: null,\n      PairContract: null,\n      Token1Contract: null,\n      Token2Contract: null,\n      address: \"\",\n      marketAddress: \"\",\n      asset: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  } // first up is to detect ethereum provider\n\n\n  async loadWeb3() {\n    const provider = await detectEthereumProvider(); // modern browsers\n\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const FacforyContract = new web3.eth.Contract(Factory.abi, \"0x6725F303b657a9451d8BA641348b6761A6CC7a17\");\n    const RouterContract = new web3.eth.Contract(Router.abi, \"0xD99D1c33F9fC3444f8101754aBC46c52416550D1\");\n    const Token1Contract = new web3.eth.Contract(Token1.abi, \"\");\n    const Token2Contract = new web3.eth.Contract(Token2.new().abi, \"\");\n    this.setState({\n      FacforyContract,\n      RouterContract,\n      Token1Contract,\n      Token2Contract\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(Header, {\n      as: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Velvet.Capital\"), React.createElement(HeaderSubheader, {\n      as: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Exchange Rate\"), React.createElement(Button, {\n      onClick: this.deployTest,\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Deploy!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/navinalang/Navina-workgroup/05_create_and_burn/client/src/App.js"],"names":["React","Component","Factory","Router","Pair","Token1","Token2","detectEthereumProvider","Web3","Button","Header","HeaderSubheader","App","constructor","props","handleInputChange","event","target","value","type","checked","name","setState","deployTest","contr","deploy","send","from","state","account","console","log","FacforyContract","RouterContract","PairContract","Token1Contract","Token2Contract","address","marketAddress","asset","componentDidMount","loadWeb3","loadBlockchainData","provider","window","web3","accounts","eth","getAccounts","Contract","abi","new","render","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Factory from \"./abis/Factory.json\";\nimport Router from \"./abis/Router.json\";\nimport Pair from \"./abis/Pair.json\";\nimport Token1 from \"./abis/Token1.json\";\nimport Token2 from \"./abis/Token2.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Button, Header, HeaderSubheader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      FacforyContract: null,\n      RouterContract: null,\n      PairContract: null,\n      Token1Contract: null,\n      Token2Contract: null,\n      address: \"\",\n      marketAddress: \"\",\n      asset: \"\"\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    // modern browsers\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({ account: accounts[0] })\n    const FacforyContract = new web3.eth.Contract(Factory.abi, \"0x6725F303b657a9451d8BA641348b6761A6CC7a17\");\n    const RouterContract = new web3.eth.Contract(Router.abi, \"0xD99D1c33F9fC3444f8101754aBC46c52416550D1\");\n    const Token1Contract = new web3.eth.Contract(Token1.abi, \"\");\n    const Token2Contract = new web3.eth.Contract(Token2.new().abi, \"\");\n    this.setState({ FacforyContract, RouterContract, Token1Contract, Token2Contract });\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  deployTest = async() => {\n    const contr = Token1.deploy().send({from: this.state.account});\n    console.log(contr);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <br></br>\n        <Header as='h1'>Velvet.Capital</Header>\n        <HeaderSubheader as='h2'>Exchange Rate</HeaderSubheader>\n\n        <Button onClick={this.deployTest} color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Deploy!</Button><br></br>\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}