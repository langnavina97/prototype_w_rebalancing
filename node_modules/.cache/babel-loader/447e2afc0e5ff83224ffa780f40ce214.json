{"ast":null,"code":"var _jsxFileName = \"/Users/navinalang/prototype/src/App.js\";\nimport React, { Component } from \"react\";\nimport IndexSwap from \"./abis/IndexSwap.json\";\nimport IndexToken from \"./abis/indexToken.json\";\nimport IERC from \"./abis/IERC20.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Grid, Button, Card, Header, HeaderSubheader, Form, Input } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.investNFT = async () => {\n      const web3 = window.web3;\n      const v = this.state.nftToMint;\n      const amount = web3.utils.toWei(v, \"ether\");\n      const resp = await this.state.SwapContract.methods.investInFundNFT().send({\n        from: this.state.account,\n        value: amount\n      });\n\n      if (resp.status) {\n        window.alert(\"Investment successful!\");\n      } else {\n        window.alert(\"Investment failed!\");\n      }\n\n      this.calcTokenBalances();\n    };\n\n    this.investDeFi = async () => {\n      const v = this.state.defiToMint;\n      const resp = await this.state.SwapContract.methods.investInFundDeFi().send({\n        from: this.state.account,\n        value: v\n      });\n\n      if (resp.status) {\n        window.alert(\"Investment successful!\");\n      } else {\n        window.alert(\"Investment failed!\");\n      }\n\n      this.calcTokenBalances();\n    };\n\n    this.calcTokenBalances = async () => {\n      const nftTokenBalance = await this.state.NFTTokenContract.methods.balanceOf(this.state.account).call();\n      const defiTokenBalance = await this.state.DeFiTokenContract.methods.balanceOf(this.state.account).call();\n      const web3 = window.web3;\n      const USDTokenConntract = new web3.eth.Contract(IERC.abi, \"0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684\");\n      const usdtTokenBalance = await USDTokenConntract.methods.balanceOf(this.state.account).call();\n      const BUSDTokenConntract = new web3.eth.Contract(IERC.abi, \"0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7\");\n      const busdTokenBalance = await BUSDTokenConntract.methods.balanceOf(this.state.account).call();\n      const DAITokenConntract = new web3.eth.Contract(IERC.abi, \"0x8a9424745056Eb399FD19a0EC26A14316684e274\");\n      const daiTokenBalance = await DAITokenConntract.methods.balanceOf(this.state.account).call();\n      this.setState({\n        nftTokenBalance,\n        defiTokenBalance,\n        usdtTokenBalance,\n        busdTokenBalance,\n        daiTokenBalance\n      });\n    };\n\n    this.state = {\n      account: '',\n      SwapContract: null,\n      NFTTokenContract: null,\n      DeFiTokenContract: null,\n      address: \"\",\n      defiToMint: 0,\n      nftToMint: 0,\n      defiBalance: 0,\n      nftBalance: 0,\n      nftTokenBalance: 0,\n      defiTokenBalance: 0,\n      usdtTokenBalance: 0,\n      busdTokenBalance: 0,\n      daiTokenBalance: 0\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    await this.calcTokenBalances();\n  } // first up is to detect ethereum provider\n\n\n  async loadWeb3() {\n    const provider = await detectEthereumProvider(); // modern browsers\n\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const SwapContract = new web3.eth.Contract(IndexSwap.abi, \"0x38F6EDad57B87e412f4AdF0119d4f735E46DD802\");\n    const NFTTokenContract = new web3.eth.Contract(IndexToken.abi, \"0x64a9057A0DbddDfB8A81b69ccf7536E4bAde0AbE\");\n    const DeFiTokenContract = new web3.eth.Contract(IndexToken.abi, \"0xFd22F799B90888973dc841a11E6ED0cf24f0b7e4\");\n    this.setState({\n      SwapContract,\n      NFTTokenContract,\n      DeFiTokenContract\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }), React.createElement(Header, {\n      as: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Velvet.Capital\"), React.createElement(Grid, {\n      divided: \"vertically\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      columns: 2,\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"900px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      style: {\n        background: \"#406ccd\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"DeFi\"), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, \"Top 5 DeFi tokens\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.investDeFi,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Input, {\n      style: {\n        width: \"300px\",\n        padding: 3\n      },\n      required: true,\n      type: \"text\",\n      placeholder: \"BNB amount to invest\",\n      name: \"defiToMint\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"Invest!\")), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Balances\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"DeFi Token: \", this.state.defiTokenBalance), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"USDT Token: \", this.state.usdtTokenBalance), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"BUSD Token: \", this.state.busdTokenBalance), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"DAI Token: \", this.state.daiTokenBalance)))))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"900px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      style: {\n        background: \"#406ccd\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \"NFT\"), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"Top 5 NFT tokens\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(Form, {\n      onSubmit: this.investNFT,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(Input, {\n      style: {\n        width: \"300px\",\n        padding: 3\n      },\n      required: true,\n      type: \"text\",\n      placeholder: \"BNB amount to invest\",\n      name: \"nftToMint\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, \"Invest!\")), React.createElement(\"h5\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \"Balances\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"NFT Token: \", this.state.nftTokenBalance), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \"USDT Token: \", this.state.usdtTokenBalance), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, \"BUSD Token: \", this.state.busdTokenBalance), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, \"DAI Token: \", this.state.daiTokenBalance)))))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/navinalang/prototype/src/App.js"],"names":["React","Component","IndexSwap","IndexToken","IERC","detectEthereumProvider","Web3","Grid","Button","Card","Header","HeaderSubheader","Form","Input","App","constructor","props","handleInputChange","event","target","value","type","checked","name","setState","investNFT","web3","window","v","state","nftToMint","amount","utils","toWei","resp","SwapContract","methods","investInFundNFT","send","from","account","status","alert","calcTokenBalances","investDeFi","defiToMint","investInFundDeFi","nftTokenBalance","NFTTokenContract","balanceOf","call","defiTokenBalance","DeFiTokenContract","USDTokenConntract","eth","Contract","abi","usdtTokenBalance","BUSDTokenConntract","busdTokenBalance","DAITokenConntract","daiTokenBalance","address","defiBalance","nftBalance","componentDidMount","loadWeb3","loadBlockchainData","provider","console","log","accounts","getAccounts","render","margin","width","background","padding"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport IndexSwap from \"./abis/IndexSwap.json\";\nimport IndexToken from \"./abis/indexToken.json\";\nimport IERC from \"./abis/IERC20.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Grid, Button, Card, Header, HeaderSubheader, Form, Input } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      SwapContract: null,\n      NFTTokenContract: null,\n      DeFiTokenContract: null,\n      address: \"\",\n\n      defiToMint: 0,\n      nftToMint: 0,\n      defiBalance: 0,\n      nftBalance: 0,\n\n      nftTokenBalance: 0,\n      defiTokenBalance: 0,\n      usdtTokenBalance: 0,\n      busdTokenBalance: 0,\n      daiTokenBalance: 0\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n    await this.calcTokenBalances();\n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    // modern browsers\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({ account: accounts[0] })\n    const SwapContract = new web3.eth.Contract(IndexSwap.abi, \"0x38F6EDad57B87e412f4AdF0119d4f735E46DD802\");\n    const NFTTokenContract = new web3.eth.Contract(IndexToken.abi, \"0x64a9057A0DbddDfB8A81b69ccf7536E4bAde0AbE\");\n    const DeFiTokenContract = new web3.eth.Contract(IndexToken.abi, \"0xFd22F799B90888973dc841a11E6ED0cf24f0b7e4\");\n    this.setState({ SwapContract, NFTTokenContract, DeFiTokenContract });\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  investNFT = async() => {\n    const web3 = window.web3;\n    const v = this.state.nftToMint;\n    const amount = web3.utils.toWei(v, \"ether\");\n    const resp = await this.state.SwapContract.methods.investInFundNFT().send({from: this.state.account, value: amount});\n    if(resp.status) {\n      window.alert(\"Investment successful!\");\n    } else {\n      window.alert(\"Investment failed!\");\n    }\n\n    this.calcTokenBalances();\n  }\n\n  investDeFi = async() => {\n    const v = this.state.defiToMint;\n    const resp = await this.state.SwapContract.methods.investInFundDeFi().send({from: this.state.account, value: v});\n    if(resp.status) {\n      window.alert(\"Investment successful!\");\n    } else {\n      window.alert(\"Investment failed!\");\n    }\n\n    this.calcTokenBalances();\n  }\n\n  calcTokenBalances = async() => {\n    const nftTokenBalance = await this.state.NFTTokenContract.methods.balanceOf(this.state.account).call();\n    const defiTokenBalance = await this.state.DeFiTokenContract.methods.balanceOf(this.state.account).call();\n    \n    const web3 = window.web3;\n\n    const USDTokenConntract = new web3.eth.Contract(IERC.abi, \"0x7ef95a0FEE0Dd31b22626fA2e10Ee6A223F8a684\");\n    const usdtTokenBalance = await USDTokenConntract.methods.balanceOf(this.state.account).call();\n\n    const BUSDTokenConntract = new web3.eth.Contract(IERC.abi, \"0x78867BbEeF44f2326bF8DDd1941a4439382EF2A7\");\n    const busdTokenBalance = await BUSDTokenConntract.methods.balanceOf(this.state.account).call();\n\n    const DAITokenConntract = new web3.eth.Contract(IERC.abi, \"0x8a9424745056Eb399FD19a0EC26A14316684e274\");\n    const daiTokenBalance = await DAITokenConntract.methods.balanceOf(this.state.account).call();\n    \n    this.setState({ nftTokenBalance, defiTokenBalance, usdtTokenBalance, busdTokenBalance,daiTokenBalance });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <br></br>\n        <Header as='h1'>Velvet.Capital</Header>\n\n        <Grid divided='vertically'>\n          <Grid.Row columns={2} style={{ margin: \"20px\" }}>\n            <Grid.Column>\n\n              <Card.Group>\n                <Card style={{ width: \"900px\" }}>\n                  <Card.Content style={{ background: \"#406ccd\" }}>\n                    <Card.Header>DeFi</Card.Header>\n                    <Card.Meta>Top 5 DeFi tokens</Card.Meta>\n                    <Card.Description>\n\n                      <Form onSubmit={this.investDeFi}>\n                        <Input style={{ width: \"300px\", padding: 3 }} required type=\"text\" placeholder=\"BNB amount to invest\" name=\"defiToMint\" onChange={this.handleInputChange}></Input><br></br>\n                        <Button color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Invest!</Button>\n                      </Form>\n\n                      <h5>Balances</h5>\n\n                      <p>DeFi Token: {this.state.defiTokenBalance}</p>\n                      <p>USDT Token: {this.state.usdtTokenBalance}</p>\n                      <p>BUSD Token: {this.state.busdTokenBalance}</p>\n                      <p>DAI Token: {this.state.daiTokenBalance}</p>\n            \n                    </Card.Description>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </Grid.Column>\n\n\n            <Grid.Column>\n              <Card.Group>\n                <Card style={{ width: \"900px\" }}>\n                  <Card.Content style={{ background: \"#406ccd\" }}>\n                    <Card.Header>NFT</Card.Header>\n                    <Card.Meta>Top 5 NFT tokens</Card.Meta>\n                    <Card.Description>\n\n                      <Form onSubmit={this.investNFT}>\n                        <Input style={{ width: \"300px\", padding: 3 }} required type=\"text\" placeholder=\"BNB amount to invest\" name=\"nftToMint\" onChange={this.handleInputChange}></Input><br></br>\n                        <Button color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Invest!</Button>\n                      </Form>\n\n                      <h5>Balances</h5>\n\n                      <p>NFT Token: {this.state.nftTokenBalance}</p>\n                      <p>USDT Token: {this.state.usdtTokenBalance}</p>\n                      <p>BUSD Token: {this.state.busdTokenBalance}</p>\n                      <p>DAI Token: {this.state.daiTokenBalance}</p>\n\n                    </Card.Description>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div >\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}