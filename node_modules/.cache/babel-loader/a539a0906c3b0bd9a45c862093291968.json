{"ast":null,"code":"var _jsxFileName = \"/Users/navinalang/Navina-workgroup/05_create_and_burn_copy/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport LiquidityPool from \"./abis/LiquidityPool.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Grid, Button, Card, Header, HeaderSubheader, Form, Input } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.mintDeFiTokens = async () => {\n      await this.state.LPContract.methods.mintDeFi(10000).send({\n        from: this.state.account\n      });\n    };\n\n    this.mintNFTTokens = async () => {\n      await this.state.LPContract.methods.mintNFT(10000).send({\n        from: this.state.account\n      });\n    };\n\n    this.getDeFiBalance = async () => {\n      const res = await this.state.LPContract.methods.getDeFiBalance().call({\n        from: this.state.account\n      });\n      this.setState({\n        defiBalance: res\n      });\n    };\n\n    this.getNFTBalance = async () => {\n      const res = await this.state.LPContract.methods.getNFTBalance().call();\n      this.setState({\n        nftBalance: res\n      });\n    };\n\n    this.state = {\n      account: '',\n      LPContract: null,\n      address: \"\",\n      defiToMint: 0,\n      nftToMint: 0,\n      defiBalance: 0,\n      nftBalance: 0\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  } // first up is to detect ethereum provider\n\n\n  async loadWeb3() {\n    const provider = await detectEthereumProvider(); // modern browsers\n\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const LPContract = new web3.eth.Contract(LiquidityPool.abi, \"0xaf3335B8Ee5b4d58bdC1395fb582cE1D037F624d\");\n    this.setState({\n      LPContract\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), React.createElement(Header, {\n      as: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Velvet.Capital\"), React.createElement(Grid, {\n      divided: \"vertically\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      columns: 2,\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"900px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      style: {\n        background: \"#406ccd\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, \"DeFi\"), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Top 5 DeFi tokens\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Mint amount of the two created tokens listed on the top!\"), React.createElement(Form, {\n      onSubmit: this.mintDeFiTokens,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(Input, {\n      style: {\n        width: \"300px\",\n        padding: 3\n      },\n      required: true,\n      type: \"text\",\n      placeholder: \"Amount to mint\",\n      name: \"defiToMint\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Mint\")), React.createElement(Button, {\n      onClick: this.getDeFiBalance,\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, \"Get DeFi Balance!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, this.state.defiBalance)))))), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Card.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(Card, {\n      style: {\n        width: \"900px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, React.createElement(Card.Content, {\n      style: {\n        background: \"#406ccd\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, React.createElement(Card.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, \"NFT\"), React.createElement(Card.Meta, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Top 5 NFT tokens\"), React.createElement(Card.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Mint amount of the two created tokens listed on the top!\"), React.createElement(Form, {\n      onSubmit: this.getDeFiBalance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Input, {\n      style: {\n        width: \"300px\",\n        padding: 3\n      },\n      required: true,\n      type: \"text\",\n      placeholder: \"Amount to mint\",\n      name: \"nftToMint\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }), React.createElement(Button, {\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, \"Mint!\")), React.createElement(Button, {\n      onClick: this.getNFTBalance,\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"Get NFT Balance!\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.state.nftBalance)))))))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/navinalang/Navina-workgroup/05_create_and_burn_copy/client/src/App.js"],"names":["React","Component","LiquidityPool","detectEthereumProvider","Web3","Grid","Button","Card","Header","HeaderSubheader","Form","Input","App","constructor","props","handleInputChange","event","target","value","type","checked","name","setState","mintDeFiTokens","state","LPContract","methods","mintDeFi","send","from","account","mintNFTTokens","mintNFT","getDeFiBalance","res","call","defiBalance","getNFTBalance","nftBalance","address","defiToMint","nftToMint","componentDidMount","loadWeb3","loadBlockchainData","provider","console","log","window","web3","accounts","eth","getAccounts","Contract","abi","render","margin","width","background","padding"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport LiquidityPool from \"./abis/LiquidityPool.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Grid, Button, Card, Header, HeaderSubheader, Form, Input } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      LPContract: null,\n      address: \"\",\n      defiToMint: 0,\n      nftToMint: 0,\n      defiBalance: 0,\n      nftBalance: 0\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    // modern browsers\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({ account: accounts[0] })\n    const LPContract = new web3.eth.Contract(LiquidityPool.abi, \"0xaf3335B8Ee5b4d58bdC1395fb582cE1D037F624d\");\n    this.setState({ LPContract });\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  mintDeFiTokens = async() => {\n    await this.state.LPContract.methods.mintDeFi(10000).send({from: this.state.account});\n  }\n\n  mintNFTTokens = async() => {\n    await this.state.LPContract.methods.mintNFT(10000).send({from: this.state.account});\n  }\n\n  getDeFiBalance = async() => {\n    const res = await this.state.LPContract.methods.getDeFiBalance().call({from: this.state.account});\n    this.setState({\n      defiBalance: res\n    })\n  }\n\n  getNFTBalance = async() => {\n    const res = await this.state.LPContract.methods.getNFTBalance().call();\n    this.setState({\n      nftBalance: res\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <br></br>\n        <Header as='h1'>Velvet.Capital</Header>\n\n        <Grid divided='vertically'>\n          <Grid.Row columns={2} style={{ margin: \"20px\" }}>\n            <Grid.Column>\n\n              <Card.Group>\n                <Card style={{ width: \"900px\" }}>\n                  <Card.Content style={{ background: \"#406ccd\" }}>\n                    <Card.Header>DeFi</Card.Header>\n                    <Card.Meta>Top 5 DeFi tokens</Card.Meta>\n                    <Card.Description>\n\n                      <p>Mint amount of the two created tokens listed on the top!</p>\n                      <Form onSubmit={this.mintDeFiTokens}>\n                        <Input style={{ width: \"300px\", padding: 3 }} required type=\"text\" placeholder=\"Amount to mint\" name=\"defiToMint\" onChange={this.handleInputChange}></Input><br></br>\n                        <Button color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Mint</Button>\n                      </Form>\n\n                      <Button onClick={this.getDeFiBalance} color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Get DeFi Balance!</Button>\n                      <p>{this.state.defiBalance}</p>\n            \n                    </Card.Description>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n            </Grid.Column>\n\n\n            <Grid.Column>\n              <Card.Group>\n                <Card style={{ width: \"900px\" }}>\n                  <Card.Content style={{ background: \"#406ccd\" }}>\n                    <Card.Header>NFT</Card.Header>\n                    <Card.Meta>Top 5 NFT tokens</Card.Meta>\n                    <Card.Description>\n\n                      <p>Mint amount of the two created tokens listed on the top!</p>\n                      <Form onSubmit={this.getDeFiBalance}>\n                        <Input style={{ width: \"300px\", padding: 3 }} required type=\"text\" placeholder=\"Amount to mint\" name=\"nftToMint\" onChange={this.handleInputChange}></Input><br></br>\n                        <Button color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Mint!</Button>\n                      </Form>\n\n                      <Button onClick={this.getNFTBalance} color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Get NFT Balance!</Button>\n                      <p>{this.state.nftBalance}</p>\n\n\n                    </Card.Description>\n                  </Card.Content>\n                </Card>\n              </Card.Group>\n\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </div >\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}