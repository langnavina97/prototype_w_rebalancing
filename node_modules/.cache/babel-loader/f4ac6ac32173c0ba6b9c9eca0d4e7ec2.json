{"ast":null,"code":"var _jsxFileName = \"/Users/navinalang/Navina-workgroup/05_create_and_burn/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport Factory from \"./abis/Factory.json\";\nimport Router from \"./abis/Router.json\";\nimport CreateTokens from \"./abis/CreateTokens.json\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Button, Header, HeaderSubheader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checked : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.createPool = async () => {\n      await this.state.TokenContract.methods.create().send({\n        from: this.state.account\n      });\n      const tokenA = await this.state.TokenContract.methods.tokenA().call();\n      const tokenB = await this.state.TokenContract.methods.tokenB().call();\n      console.log(\"Tokens\");\n      console.log(tokenA);\n      console.log(tokenB);\n      const pairAddress = await this.state.FacforyContract.createPair(tokenA, tokenB).call();\n      console.log(pairAddress);\n    };\n\n    this.state = {\n      account: '',\n      FacforyContract: null,\n      RouterContract: null,\n      TokenContract: null,\n      address: \"\",\n      marketAddress: \"\",\n      asset: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  } // first up is to detect ethereum provider\n\n\n  async loadWeb3() {\n    const provider = await detectEthereumProvider(); // modern browsers\n\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    });\n    const FacforyContract = new web3.eth.Contract(Factory.abi, \"0x6725F303b657a9451d8BA641348b6761A6CC7a17\");\n    const RouterContract = new web3.eth.Contract(Router.abi, \"0xD99D1c33F9fC3444f8101754aBC46c52416550D1\");\n    const TokenContract = new web3.eth.Contract(CreateTokens.abi, \"0x80DbA59CbEE267Dde7dE82323Ad5076dD30Eb55a\");\n    this.setState({\n      FacforyContract,\n      RouterContract,\n      TokenContract\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(Header, {\n      as: \"h1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Velvet.Capital\"), React.createElement(HeaderSubheader, {\n      as: \"h2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Create and Burn\"), React.createElement(Button, {\n      onClick: this.createPool,\n      color: \"green\",\n      type: \"submit\",\n      style: {\n        margin: \"20px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \"Create Pool!\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/navinalang/Navina-workgroup/05_create_and_burn/client/src/App.js"],"names":["React","Component","Factory","Router","CreateTokens","detectEthereumProvider","Web3","Button","Header","HeaderSubheader","App","constructor","props","handleInputChange","event","target","value","type","checked","name","setState","createPool","state","TokenContract","methods","create","send","from","account","tokenA","call","tokenB","console","log","pairAddress","FacforyContract","createPair","RouterContract","address","marketAddress","asset","componentDidMount","loadWeb3","loadBlockchainData","provider","window","web3","accounts","eth","getAccounts","Contract","abi","render","margin"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Factory from \"./abis/Factory.json\";\nimport Router from \"./abis/Router.json\";\nimport CreateTokens from \"./abis/CreateTokens.json\";\n\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport Web3 from 'web3';\nimport { Button, Header, HeaderSubheader } from 'semantic-ui-react';\nimport 'semantic-ui-css/semantic.min.css';\n\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: '',\n      FacforyContract: null,\n      RouterContract: null,\n      TokenContract: null,\n      address: \"\",\n      marketAddress: \"\",\n      asset: \"\"\n    }\n  }\n\n  async componentDidMount() {\n    await this.loadWeb3();\n    await this.loadBlockchainData();\n  }\n\n  // first up is to detect ethereum provider\n  async loadWeb3() {\n    const provider = await detectEthereumProvider();\n\n    // modern browsers\n    if (provider) {\n      console.log('Ethereum wallet is connected');\n\n      window.web3 = new Web3(provider);\n    } else {\n      console.log('No ethereum wallet detected');\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3;\n    const accounts = await window.web3.eth.getAccounts();\n    this.setState({ account: accounts[0] })\n    const FacforyContract = new web3.eth.Contract(Factory.abi, \"0x6725F303b657a9451d8BA641348b6761A6CC7a17\");\n    const RouterContract = new web3.eth.Contract(Router.abi, \"0xD99D1c33F9fC3444f8101754aBC46c52416550D1\");\n    const TokenContract = new web3.eth.Contract(CreateTokens.abi, \"0x80DbA59CbEE267Dde7dE82323Ad5076dD30Eb55a\");\n    this.setState({ FacforyContract, RouterContract, TokenContract });\n  }\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\n    const name = target.name;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  createPool = async() => {\n    await this.state.TokenContract.methods.create().send({ from: this.state.account });\n    const tokenA = await this.state.TokenContract.methods.tokenA().call();\n    const tokenB = await this.state.TokenContract.methods.tokenB().call();\n    console.log(\"Tokens\");\n    console.log(tokenA);\n    console.log(tokenB);\n    const pairAddress = await this.state.FacforyContract.createPair(tokenA, tokenB).call();\n    console.log(pairAddress);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <br></br>\n        <Header as='h1'>Velvet.Capital</Header>\n        <HeaderSubheader as='h2'>Create and Burn</HeaderSubheader>\n\n        <Button onClick={this.createPool} color=\"green\" type=\"submit\" style={{ margin: \"20px\" }}>Create Pool!</Button><br></br>\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n\n"]},"metadata":{},"sourceType":"module"}